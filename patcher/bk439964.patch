diff --git a/usr/src/minix/include/minix/callnr.h b/usr/src/minix/include/minix/callnr.h
index 6030687..a543d38 100644
--- a/usr/src/minix/include/minix/callnr.h
+++ b/usr/src/minix/include/minix/callnr.h
@@ -118,7 +118,9 @@
 #define VFS_COPYFD		(VFS_BASE + 46)
 #define VFS_CHECKPERMS		(VFS_BASE + 47)
 #define VFS_GETSYSINFO		(VFS_BASE + 48)
+#define VFS_EXCLUSIVE		(VFS_BASE + 49)
+#define VFS_FEXCLUSIVE		(VFS_BASE + 50)
 
-#define NR_VFS_CALLS		49	/* highest number from base plus one */
+#define NR_VFS_CALLS		51	/* highest number from base plus one */
 
 #endif /* !_MINIX_CALLNR_H */
diff --git a/usr/src/minix/include/minix/ipc.h b/usr/src/minix/include/minix/ipc.h
index 622c40d..641ab12 100644
--- a/usr/src/minix/include/minix/ipc.h
+++ b/usr/src/minix/include/minix/ipc.h
@@ -841,6 +841,16 @@ typedef struct {
 } mess_lc_vfs_umount;
 _ASSERT_MSG_SIZE(mess_lc_vfs_umount);
 
+typedef struct {
+	int fd;
+	vir_bytes name;
+	size_t len;
+	int flags;
+
+	uint8_t padding[40];
+} mess_lc_vfs_exclusive;
+_ASSERT_MSG_SIZE(mess_lc_vfs_exclusive);
+
 typedef struct {
 	void		*addr;
 	uint8_t		padding[52];
@@ -2121,6 +2131,7 @@ typedef struct {
 		mess_lc_vfs_truncate	m_lc_vfs_truncate;
 		mess_lc_vfs_umask	m_lc_vfs_umask;
 		mess_lc_vfs_umount	m_lc_vfs_umount;
+		mess_lc_vfs_exclusive	m_lc_vfs_exclusive;
 		mess_lc_vm_brk		m_lc_vm_brk;
 		mess_lc_vm_getphys	m_lc_vm_getphys;
 		mess_lc_vm_rusage	m_lc_vm_rusage;
diff --git a/usr/src/sys/sys/fcntl.h b/usr/src/sys/sys/fcntl.h
index 6caaf29..65095df 100644
--- a/usr/src/sys/sys/fcntl.h
+++ b/usr/src/sys/sys/fcntl.h
@@ -301,6 +301,13 @@ struct flock {
 #define	AT_REMOVEDIR		0x800	/* Remove directory only */
 #endif
 
+/*
+ * Constants for exclusive lock.
+ */
+#define EXCL_UNLOCK				1	/* Unlock. */
+#define EXCL_UNLOCK_FORCE		2	/* Forced unlock by privileged users. */
+#define EXCL_LOCK				4	/* Lock unconditionally. */
+#define EXCL_LOCK_NO_OTHERS		8	/* Lock if no other users have this file opened. */
 
 #ifndef _KERNEL
 #include <sys/cdefs.h>
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/const.h fake_mount/usr/src/minix/servers/vfs/const.h
--- old_mount/usr/src/minix/servers/vfs/const.h	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/const.h	2023-06-15 17:37:20.024768290 +0200
@@ -7,6 +7,7 @@
 #define NR_MNTS           16 	/* # slots in mount table */
 #define NR_VNODES       1024	/* # slots in vnode table */
 #define NR_WTHREADS	   9	/* # slots in worker thread table */
+#define NR_EXCLUSIVE	8	/* # slots in the exclusive locking table */
 
 #define NR_NONEDEVS	NR_MNTS	/* # slots in nonedev bitmap */
 
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/exclusive.c fake_mount/usr/src/minix/servers/vfs/exclusive.c
--- old_mount/usr/src/minix/servers/vfs/exclusive.c	1970-01-01 01:00:00.000000000 +0100
+++ fake_mount/usr/src/minix/servers/vfs/exclusive.c	2023-06-17 17:26:50.441089426 +0200
@@ -0,0 +1,32 @@
+#include "fs.h"
+#include "glo.h"
+#include "fproc.h"
+#include <minix/endpoint.h>
+#include <sys/types.h>
+#include <stdio.h>
+
+int find_owner(endpoint_t caller, uid_t* owner) {
+	printf("caller: %d\n", caller);
+	for (int i = 0; i < NR_PROCS; i++)
+		if (fproc[i].fp_endpoint == caller) {
+			*owner = fproc[i].fp_realuid;
+			return 0;
+		}
+	printf("NOT FOUND\n");
+	return ENOSYS;
+}
+
+int do_exclusive(void) {
+	uid_t owner = 0;
+	int error;
+	printf("HERE\n");
+	if ((error = find_owner(who_e, &owner)))
+		return error;
+	printf("%d", owner);
+	return(ENOSYS);  // TODO: implementacja VFS_EXCLUSIVE
+}
+
+int do_fexclusive(void) {
+	uid_t owner;
+	return(ENOSYS);  // TODO: implementacja VFS_FEXCLUSIVE
+}
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/glo.h fake_mount/usr/src/minix/servers/vfs/glo.h
--- old_mount/usr/src/minix/servers/vfs/glo.h	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/glo.h	2023-06-17 17:53:40.963530857 +0200
@@ -47,4 +47,7 @@ extern int (* const call_vec[])(void);
 
 EXTERN struct kinfo kinfo;     /* kernel information */
 
+EXTERN int ex_locked;	      /* number of locked files via VFS_EXCLUSIVE/
+				  VFS_FEXCLUSIVE sys call */
+
 #endif
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/main.c fake_mount/usr/src/minix/servers/vfs/main.c
--- old_mount/usr/src/minix/servers/vfs/main.c	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/main.c	2023-06-17 17:55:28.442378329 +0200
@@ -26,6 +26,7 @@
 #include <minix/debug.h>
 #include <minix/vfsif.h>
 #include "file.h"
+#include "glo.h"
 #include "scratchpad.h"
 #include "vmnt.h"
 #include "vnode.h"
@@ -386,6 +387,9 @@ static int sef_cb_init_fresh(int UNUSED(
   worker_start(fproc_addr(VFS_PROC_NR), do_init_root, &mess /*unused*/,
 	FALSE /*use_spare*/);
 
+  /* init locked files counter */
+  ex_locked = 0;
+
   return(OK);
 }
 
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/Makefile fake_mount/usr/src/minix/servers/vfs/Makefile
--- old_mount/usr/src/minix/servers/vfs/Makefile	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/Makefile	2023-06-15 17:37:20.024768290 +0200
@@ -7,7 +7,8 @@ SRCS=	main.c open.c read.c write.c pipe.
 	filedes.c stadir.c protect.c time.c \
 	lock.c misc.c utility.c select.c table.c \
 	vnode.c vmnt.c request.c \
-	tll.c comm.c worker.c coredump.c
+	tll.c comm.c worker.c coredump.c \
+	exclusive.c
 
 .if ${MKCOVERAGE} != "no"
 SRCS+=  gcov.c
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/proto.h fake_mount/usr/src/minix/servers/vfs/proto.h
--- old_mount/usr/src/minix/servers/vfs/proto.h	2023-06-15 20:02:39.808941742 +0200
+++ fake_mount/usr/src/minix/servers/vfs/proto.h	2023-06-15 17:37:20.064769073 +0200
@@ -348,4 +348,9 @@ void worker_wait(void);
 struct worker_thread *worker_suspend(void);
 void worker_resume(struct worker_thread *org_self);
 void worker_set_proc(struct fproc *rfp);
+
+/* exclusive.c */
+int do_exclusive(void);
+int do_fexclusive(void);
+
 #endif
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/table.c fake_mount/usr/src/minix/servers/vfs/table.c
--- old_mount/usr/src/minix/servers/vfs/table.c	2023-06-15 20:02:39.812275138 +0200
+++ fake_mount/usr/src/minix/servers/vfs/table.c	2023-06-15 17:37:20.064769073 +0200
@@ -65,4 +65,6 @@ int (* const call_vec[NR_VFS_CALLS])(voi
 	CALL(VFS_COPYFD)	= do_copyfd,		/* copyfd(2) */
 	CALL(VFS_CHECKPERMS)	= do_checkperms,	/* checkperms(2) */
 	CALL(VFS_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(VFS_EXCLUSIVE)	= do_exclusive,		/* exclusive() */
+	CALL(VFS_FEXCLUSIVE)	= do_fexclusive,	/* fexclusive() */
 };
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/vnode.c fake_mount/usr/src/minix/servers/vfs/vnode.c
--- old_mount/usr/src/minix/servers/vfs/vnode.c	2023-06-15 20:02:39.812275138 +0200
+++ fake_mount/usr/src/minix/servers/vfs/vnode.c	2023-06-17 18:00:22.545008959 +0200
@@ -93,6 +93,7 @@ struct vnode *get_free_vnode()
 		vp->v_mapfs_e = NONE;
 		vp->v_mapfs_count = 0;
 		vp->v_mapinode_nr = 0;
+		vp->ex_lock = 0;
 		return(vp);
 	}
   }
@@ -145,6 +146,10 @@ void init_vnodes(void)
 	vp->v_fs_count = 0;
 	vp->v_mapfs_count = 0;
 	tll_init(&vp->v_lock);
+	vp->ex_lock = 0;
+	vp->ex_caller = 0;
+	vp->ex_moved = 0;
+	vp->ex_fd_locker = -1;
   }
 }
 
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/vnode.h fake_mount/usr/src/minix/servers/vfs/vnode.h
--- old_mount/usr/src/minix/servers/vfs/vnode.h	2023-06-15 20:02:39.812275138 +0200
+++ fake_mount/usr/src/minix/servers/vfs/vnode.h	2023-06-17 18:08:26.618152065 +0200
@@ -1,6 +1,8 @@
 #ifndef __VFS_VNODE_H__
 #define __VFS_VNODE_H__
 
+#include <stdbool.h>
+
 EXTERN struct vnode {
   endpoint_t v_fs_e;            /* FS process' endpoint number */
   endpoint_t v_mapfs_e;		/* mapped FS process' endpoint number */
@@ -20,6 +22,11 @@ EXTERN struct vnode {
   dev_t v_sdev;                 /* device number for special files */
   struct vmnt *v_vmnt;          /* vmnt object of the partition */
   tll_t v_lock;			/* three-level-lock */
+
+  bool ex_lock;                 /* indicator if file was locked via VFS_EXCLUSIVE/VFS_FEXCLUSIVE */
+  uid_t ex_caller;              /* user who locked file */
+  bool ex_moved;                /* whether file was moved after VFS_EXCLUSIVE call */
+  int ex_fd_locker;             /* file desc. locking file, (if locked by VFS_EXCLUSIVE) */
 } vnode[NR_VNODES];
 
 /* vnode lock types mapping */
