diff --git a/usr/src/minix/include/minix/callnr.h b/usr/src/minix/include/minix/callnr.h
index 6030687..a543d38 100644
--- a/usr/src/minix/include/minix/callnr.h
+++ b/usr/src/minix/include/minix/callnr.h
@@ -118,7 +118,9 @@
 #define VFS_COPYFD		(VFS_BASE + 46)
 #define VFS_CHECKPERMS		(VFS_BASE + 47)
 #define VFS_GETSYSINFO		(VFS_BASE + 48)
+#define VFS_EXCLUSIVE		(VFS_BASE + 49)
+#define VFS_FEXCLUSIVE		(VFS_BASE + 50)
 
-#define NR_VFS_CALLS		49	/* highest number from base plus one */
+#define NR_VFS_CALLS		51	/* highest number from base plus one */
 
 #endif /* !_MINIX_CALLNR_H */
diff --git a/usr/src/minix/include/minix/ipc.h b/usr/src/minix/include/minix/ipc.h
index 622c40d..641ab12 100644
--- a/usr/src/minix/include/minix/ipc.h
+++ b/usr/src/minix/include/minix/ipc.h
@@ -841,6 +841,16 @@ typedef struct {
 } mess_lc_vfs_umount;
 _ASSERT_MSG_SIZE(mess_lc_vfs_umount);
 
+typedef struct {
+	int fd;
+	vir_bytes name;
+	size_t len;
+	int flags;
+
+	uint8_t padding[40];
+} mess_lc_vfs_exclusive;
+_ASSERT_MSG_SIZE(mess_lc_vfs_exclusive);
+
 typedef struct {
 	void		*addr;
 	uint8_t		padding[52];
@@ -2121,6 +2131,7 @@ typedef struct {
 		mess_lc_vfs_truncate	m_lc_vfs_truncate;
 		mess_lc_vfs_umask	m_lc_vfs_umask;
 		mess_lc_vfs_umount	m_lc_vfs_umount;
+		mess_lc_vfs_exclusive	m_lc_vfs_exclusive;
 		mess_lc_vm_brk		m_lc_vm_brk;
 		mess_lc_vm_getphys	m_lc_vm_getphys;
 		mess_lc_vm_rusage	m_lc_vm_rusage;
diff --git a/usr/src/sys/sys/fcntl.h b/usr/src/sys/sys/fcntl.h
index 6caaf29..65095df 100644
--- a/usr/src/sys/sys/fcntl.h
+++ b/usr/src/sys/sys/fcntl.h
@@ -301,6 +301,13 @@ struct flock {
 #define	AT_REMOVEDIR		0x800	/* Remove directory only */
 #endif
 
+/*
+ * Constants for exclusive lock.
+ */
+#define EXCL_UNLOCK				1	/* Unlock. */
+#define EXCL_UNLOCK_FORCE		2	/* Forced unlock by privileged users. */
+#define EXCL_LOCK				4	/* Lock unconditionally. */
+#define EXCL_LOCK_NO_OTHERS		8	/* Lock if no other users have this file opened. */
 
 #ifndef _KERNEL
 #include <sys/cdefs.h>
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/const.h fake_mount/usr/src/minix/servers/vfs/const.h
--- old_mount/usr/src/minix/servers/vfs/const.h	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/const.h	2023-06-17 21:31:18.725731979 +0200
@@ -7,6 +7,7 @@
 #define NR_MNTS           16 	/* # slots in mount table */
 #define NR_VNODES       1024	/* # slots in vnode table */
 #define NR_WTHREADS	   9	/* # slots in worker thread table */
+#define NR_EXCLUSIVE	8	/* # slots in the exclusive locking table */
 
 #define NR_NONEDEVS	NR_MNTS	/* # slots in nonedev bitmap */
 
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/excl_lock.h fake_mount/usr/src/minix/servers/vfs/excl_lock.h
--- old_mount/usr/src/minix/servers/vfs/excl_lock.h	1970-01-01 01:00:00.000000000 +0100
+++ fake_mount/usr/src/minix/servers/vfs/excl_lock.h	2023-06-18 19:59:44.287200711 +0200
@@ -0,0 +1,27 @@
+#ifndef __VFS_EXCL_LOCK_H__
+#define __VFS_EXCL_LOCK_H__
+
+/* This is the exclusive lock table.
+ * Slot free if (info & EXCL_LOCKED) == false
+ */
+
+EXTERN struct excl_lock {
+  mutex_t mutex; 
+  ino_t inode_nr;
+  dev_t dev;
+  int fd;
+  pid_t caller_p;
+  uid_t owner;
+
+  int info;
+} excl_lock[NR_EXCLUSIVE];
+
+#define EXCL_BY_FD        1 /* file locked by VFS_FEXCLUSIVE */
+#define EXCL_BY_PATH      2 /* file locked by VFS_EXCLUSIVE */
+#define EXCL_MOVED        4 /* file moved after VFS_EXCLUSIVE lock */
+#define EXCL_LOCKED       8 /* if lock is in use */
+
+#define EXCL_OK           0   /* permission granted */
+#define EXCL_NOT_OK       -1  /* permissions not granted */
+
+#endif
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/exclusive.c fake_mount/usr/src/minix/servers/vfs/exclusive.c
--- old_mount/usr/src/minix/servers/vfs/exclusive.c	1970-01-01 01:00:00.000000000 +0100
+++ fake_mount/usr/src/minix/servers/vfs/exclusive.c	2023-06-18 23:37:46.223422784 +0200
@@ -0,0 +1,239 @@
+#include "fs.h"
+#include "file.h"
+#include "tll.h"
+#include "vnode.h"
+#include "lookup.h"
+#include <minix/endpoint.h>
+#include <minix/vfsif.h>
+#include <sys/types.h>
+#include <sys/fcntl.h>
+#include <stdio.h>
+
+#define OK 0
+#define NOT_OK -1
+
+#define locked_by(vp, lc) ((lc->info&EXCL_LOCKED) && lc->dev == vp->v_dev && lc->inode_nr == vp->v_inode_nr)
+#define drop_lock(lc) ((lc->info = (lc->info & EXCL_LOCKED ? lc->info^EXCL_LOCKED : lc->info))) 
+
+#define LOCK_EXCL(lc) if (mutex_lock(&lc->mutex) != 0) { \
+	panic("Unable to obtain mutex on excl_lock");}
+#define UNLOCK_EXCL(lc) if (mutex_unlock(&lc->mutex) != 0) { \
+	panic("Unable to release mutex on excl_lock");}
+
+
+/* if lock found, return pointer to ALREADY LOCKED excl_lock */
+struct excl_lock* find_excl_lock(struct vnode* vp) {
+	struct excl_lock* lc;
+	for (lc = &excl_lock[0]; lc < &excl_lock[NR_EXCLUSIVE]; lc++) {
+		LOCK_EXCL(lc);
+		if (locked_by(vp, lc)) {
+			return lc;
+		}
+		UNLOCK_EXCL(lc);
+	}
+	return NULL;
+}
+
+/* if free spot found, return pointer to ALREADY LOCKED excl_lock */
+struct excl_lock* get_free_excl_lock(void) {
+	struct excl_lock* lc;
+	for (lc = &excl_lock[0]; lc < &excl_lock[NR_EXCLUSIVE]; lc++) {
+		LOCK_EXCL(lc);
+		if (!(lc->info & EXCL_LOCKED)) {
+			return lc;
+		}
+		UNLOCK_EXCL(lc);
+	}
+	return NULL;
+}
+
+int excl_perm_check(struct vnode* vp, uid_t usr) {
+	struct excl_lock* lc;
+	for (lc = &excl_lock[0]; lc < &excl_lock[NR_EXCLUSIVE]; lc++) {
+		LOCK_EXCL(lc);
+		if (locked_by(vp, lc)) {
+			int r = (lc->owner == usr ? EXCL_OK : EXCL_NOT_OK);
+			UNLOCK_EXCL(lc);
+			return r;
+		}
+		UNLOCK_EXCL(lc);
+	}
+	return EXCL_OK;
+}
+
+void excl_put_vnode_handler(struct vnode* vp) {
+	struct excl_lock* lc;
+	if ((lc = find_excl_lock(vp)) == NULL)
+		return;
+	if (lc->info & EXCL_MOVED)
+		drop_lock(lc);
+	UNLOCK_EXCL(lc);
+}
+
+void excl_mark_as_moved(struct vnode* vp) {
+	struct excl_lock* lc;
+	if ((lc = find_excl_lock(vp)) == NULL)
+		return;
+
+	lc->info |= EXCL_MOVED;
+	UNLOCK_EXCL(lc);
+}
+	
+void excl_drop_lock(struct vnode* vp) {
+	struct excl_lock* lc;
+	for (lc = &excl_lock[0]; lc < &excl_lock[NR_EXCLUSIVE]; lc++) {
+		LOCK_EXCL(lc);
+		if (locked_by(vp, lc))
+			drop_lock(lc);
+		UNLOCK_EXCL(lc);
+	}
+}
+
+void init_excl_locks(void) {
+	struct excl_lock* lc;
+	for (lc = &excl_lock[0]; lc < &excl_lock[NR_EXCLUSIVE]; lc++) {
+		if (mutex_init(&lc->mutex, NULL) != 0)
+			panic("Failed to initialize filp mutex");
+		lc->info = 0;
+	}
+}
+
+void excl_closing_fd(int closed_fd, pid_t caller_p, struct vnode* vp) {	
+	struct excl_lock* lc;
+	if ((lc = find_excl_lock(vp)) == NULL)
+		return;
+
+	if ((lc->info & EXCL_BY_FD) == EXCL_BY_FD)
+		if (lc->caller_p == caller_p && lc->fd == closed_fd)
+			drop_lock(lc);
+	UNLOCK_EXCL(lc);
+}
+
+int check_for_other_users(struct vnode* vp) {
+	for (int i = 0; i < NR_PROCS; i++)
+		for (int j = 0; j < OPEN_MAX; i++)
+			if (fproc[i].fp_realuid == fp->fp_realuid &&
+			    fproc[i].fp_filp[j] != NULL &&
+			    fproc[i].fp_filp[j]->filp_vno == vp)
+			{
+				return NOT_OK;
+			}
+	return OK;
+}
+
+int do_locking(struct vnode* vp, int fd, int info) {
+	struct excl_lock* lc;
+
+	if ((lc = find_excl_lock(vp)) != NULL) { /* lock already exists */
+		UNLOCK_EXCL(lc);
+		return EALREADY;
+	}
+	if ((lc = get_free_excl_lock()) == NULL) /* there's no space for another lock */
+		return ENOLCK;
+	
+	lc->owner = fp->fp_realuid;
+	lc->caller_p = fp->fp_pid;
+	lc->fd = fd;
+	lc->info = info;
+	lc->inode_nr = vp->v_inode_nr;
+	lc->dev = vp->v_dev;
+
+	UNLOCK_EXCL(lc);
+
+	return OK;
+}
+
+int do_common(struct vnode* vp, int flags, int fd, int info) {
+	struct excl_lock* lc;
+	uid_t caller = fp->fp_realuid;
+
+	switch (flags) {
+		case EXCL_LOCK:
+			return do_locking(vp, fd, info);
+		case EXCL_LOCK_NO_OTHERS:
+			if (check_for_other_users(vp) != OK)
+				return EAGAIN;
+			return do_locking(vp, fd, info);
+		case EXCL_UNLOCK:
+			if ((lc = find_excl_lock(vp)) == NULL)
+				return EINVAL;
+			if (caller != lc->owner) {
+				UNLOCK_EXCL(lc);
+				return EPERM;
+			}
+			drop_lock(lc);
+			UNLOCK_EXCL(lc);
+			break;
+		case EXCL_UNLOCK_FORCE:
+			if ((lc = find_excl_lock(vp)) == NULL)
+				return EINVAL;
+			if (caller != lc->owner && caller != SU_UID && caller != vp->v_uid) {
+				UNLOCK_EXCL(lc);
+				return EPERM;
+			}
+			drop_lock(lc);
+			UNLOCK_EXCL(lc);
+			break;
+		default:
+			return EINVAL;
+	}
+
+	return OK;
+}
+
+int do_exclusive(void) {
+	int flags = job_m_in.m_lc_vfs_exclusive.flags;
+	int fd = -1;
+	int info = EXCL_BY_PATH;
+	vir_bytes name = job_m_in.m_lc_vfs_exclusive.name;
+	size_t len = job_m_in.m_lc_vfs_exclusive.len;
+	char fullpath[PATH_MAX];
+	int r;
+	
+	struct vnode* vp;
+	struct vmnt* vmp;
+	struct lookup resolve;
+
+	lookup_init(&resolve, fullpath, PATH_NOFLAGS, &vmp, &vp);
+	resolve.l_vmnt_lock = VMNT_READ;
+	resolve.l_vnode_lock = VNODE_READ;
+
+	if (fetch_name(name, len, fullpath) != OK) return(err_code);
+	if ((vp = eat_path(&resolve, fp)) == NULL) return(err_code);
+
+	if ((r = forbidden(fp, vp, R_BIT)) != OK &&
+	    (r = forbidden(fp, vp, W_BIT)) != OK)
+	{
+		r = EACCES;
+	}
+	else 
+		r = do_common(vp,flags, fd, info);
+
+	unlock_vnode(vp);
+	unlock_vmnt(vmp);
+
+	put_vnode(vp);
+	return r;
+}
+
+int do_fexclusive(void) {
+	int flags = job_m_in.m_lc_vfs_exclusive.flags;
+	int fd = job_m_in.m_lc_vfs_exclusive.fd;
+	int info = EXCL_BY_FD;
+	int r;
+
+	struct filp* fil;
+	if ((fil = get_filp(fd, TLL_READ)) == NULL)
+		return EBADF;
+
+	if ((r = forbidden(fp, fp->file_vno,R_BIT) != OK) &&
+		(r = forbidden(fp, fp->file_vno, W_BIT) != OK))
+	{
+		r = EBADF;
+	}
+	else 
+		r = do_common(fil->filp_vno, flags, fd, info);
+
+	unlock_filp(fil);
+	return r;
+}
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/fs.h fake_mount/usr/src/minix/servers/vfs/fs.h
--- old_mount/usr/src/minix/servers/vfs/fs.h	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/fs.h	2023-06-18 09:59:58.997187359 +0200
@@ -35,5 +35,6 @@
 #include "type.h"
 #include "vmnt.h"
 #include "fproc.h"
+#include "excl_lock.h"
 
 #endif
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/link.c fake_mount/usr/src/minix/servers/vfs/link.c
--- old_mount/usr/src/minix/servers/vfs/link.c	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/link.c	2023-06-18 23:38:04.513812712 +0200
@@ -20,7 +20,10 @@
 #include <sys/dirent.h>
 #include <assert.h>
 #include "file.h"
+#include "glo.h"
 #include "path.h"
+#include "proto.h"
+#include "vmnt.h"
 #include "vnode.h"
 #include "scratchpad.h"
 
@@ -73,7 +76,7 @@ int do_link(void)
   else
 	r = forbidden(fp, dirp, W_BIT | X_BIT);
 
-  if (r == OK)
+  if (r == OK) {
 	r = req_link(vp->v_fs_e, dirp->v_inode_nr, fullpath,
 		     vp->v_inode_nr);
 
@@ -100,7 +103,7 @@ int do_unlink(void)
   struct vmnt *vmp, *vmp2;
   int r;
   char fullpath[PATH_MAX];
-  struct lookup resolve, stickycheck;
+  struct lookup resolve, permcheck;
 
   if (copy_path(fullpath, sizeof(fullpath)) != OK)
 	return(err_code);
@@ -128,29 +131,32 @@ int do_unlink(void)
 	return(r);
   }
 
-  /* Also, if the sticky bit is set, only the owner of the file or a privileged
-     user is allowed to unlink */
-  if ((dirp->v_mode & S_ISVTX) == S_ISVTX) {
-	/* Look up inode of file to unlink to retrieve owner */
-	lookup_init(&stickycheck, resolve.l_path, PATH_RET_SYMLINK, &vmp2, &vp);
-	stickycheck.l_vmnt_lock = VMNT_READ;
-	stickycheck.l_vnode_lock = VNODE_READ;
-	vp = advance(dirp, &stickycheck, fp);
+  /* perform excl perm check and sticky perm check if needed */
+  lookup_init(&permcheck, resolve.l_path, PATH_RET_SYMLINK, &vmp2, &vp);
+  permcheck.l_vmnt_lock = VMNT_READ;
+  permcheck.l_vnode_lock = VNODE_READ;
+  vp = advance(dirp, &permcheck, fp);
 	assert(vmp2 == NULL);
 	if (vp != NULL) {
-		if (vp->v_uid != fp->fp_effuid && fp->fp_effuid != SU_UID)
+	if (excl_perm_check(vp, fp->fp_realuid) != EXCL_OK)
+		r = EACCES;	
+	/* Also, if the sticky bit is set, only the owner of the file or a privileged
+	user is allowed to unlink */
+	if ((dirp->v_mode & S_ISVTX) == S_ISVTX &&
+	   (vp->v_uid != fp->fp_effuid && fp->fp_effuid != SU_UID))
 			r = EPERM;
-		unlock_vnode(vp);
-		put_vnode(vp);
-	} else
+  }
+  else 
 		r = err_code;
+
 	if (r != OK) {
 		unlock_vnode(dirp);
 		unlock_vmnt(vmp);
 		put_vnode(dirp);
+	unlock_vnode(vp);
+	put_vnode(vp);
 		return(r);
 	}
-  }
 
   upgrade_vmnt_lock(vmp);
 
@@ -161,6 +167,12 @@ int do_unlink(void)
   unlock_vnode(dirp);
   unlock_vmnt(vmp);
   put_vnode(dirp);
+
+  if (r == OK)
+	excl_mark_as_moved(vp);
+
+  unlock_vnode(vp);
+  put_vnode(vp);
   return(r);
 }
 
@@ -175,7 +187,7 @@ int do_rename(void)
   struct vmnt *oldvmp, *newvmp, *vmp2;
   char old_name[PATH_MAX];
   char fullpath[PATH_MAX];
-  struct lookup resolve, stickycheck;
+  struct lookup resolve, permcheck;
   vir_bytes vname1, vname2;
   size_t vname1_length, vname2_length;
 
@@ -193,35 +205,40 @@ int do_rename(void)
   if (fetch_name(vname1, vname1_length, fullpath) != OK) return(err_code);
   if ((old_dirp = last_dir(&resolve, fp)) == NULL) return(err_code);
 
-  /* If the sticky bit is set, only the owner of the file or a privileged
-     user is allowed to rename */
-  if ((old_dirp->v_mode & S_ISVTX) == S_ISVTX) {
-	/* Look up inode of file to unlink to retrieve owner */
-	lookup_init(&stickycheck, resolve.l_path, PATH_RET_SYMLINK, &vmp2, &vp);
-	stickycheck.l_vmnt_lock = VMNT_READ;
-	stickycheck.l_vnode_lock = VNODE_READ;
-	vp = advance(old_dirp, &stickycheck, fp);
+  /* perform excl and sticy perm check */
+  lookup_init(&permcheck, resolve.l_path, PATH_RET_SYMLINK, &vmp2, &vp);
+  permcheck.l_vmnt_lock = VMNT_READ;
+  permcheck.l_vnode_lock = VNODE_READ;
+  vp = advance(old_dirp, &permcheck, fp);
 	assert(vmp2 == NULL);
 	if (vp != NULL) {
-		if(vp->v_uid != fp->fp_effuid && fp->fp_effuid != SU_UID)
+	 /* If the sticky bit is set, only the owner of the file or a privileged
+	user is allowed to rename */
+	if ((old_dirp->v_mode & S_ISVTX) == S_ISVTX &&
+	   (vp->v_uid != fp->fp_effuid && fp->fp_effuid != SU_UID))
 			r = EPERM;
-		unlock_vnode(vp);
-		put_vnode(vp);
-	} else
+	if (excl_perm_check(vp, fp->fp_realuid) != EXCL_OK)
+		r = EACCES;
+  }
+  else 
 		r = err_code;
+
 	if (r != OK) {
 		unlock_vnode(old_dirp);
 		unlock_vmnt(oldvmp);
 		put_vnode(old_dirp);
+	unlock_vnode(vp);
+	put_vnode(vp);
 		return(r);
 	}
-  }
 
   /* Save the last component of the old name */
   if (strlen(fullpath) >= sizeof(old_name)) {
 	unlock_vnode(old_dirp);
 	unlock_vmnt(oldvmp);
 	put_vnode(old_dirp);
+	unlock_vnode(vp);
+	put_vnode(vp);
 	return(ENAMETOOLONG);
   }
   strlcpy(old_name, fullpath, PATH_MAX);
@@ -244,6 +261,8 @@ int do_rename(void)
 	unlock_vnode(old_dirp);
 	unlock_vmnt(oldvmp);
 	put_vnode(old_dirp);
+	unlock_vnode(vp);
+	put_vnode(vp);
 	return(r);
   }
 
@@ -254,12 +273,31 @@ int do_rename(void)
   if ((r1 = forbidden(fp, old_dirp, W_BIT|X_BIT)) != OK ||
       (r1 = forbidden(fp, new_dirp, W_BIT|X_BIT)) != OK) r = r1;
 
+  /* check whether name2 file isnt blocked */
+  struct vnode* vno_pom;
+  struct vmnt* vm_pom;
+  
+  lookup_init(&resolve, fullpath, PATH_NOFLAGS, &vm_pom, &vno_pom);
+  resolve.l_vmnt_lock = VMNT_READ;
+  resolve.l_vnode_lock = VNODE_READ;
+  if ((vno_pom = eat_path(&resolve, fp)) != NULL) {
+	/* perform excl_lock perm check */
+	if (excl_perm_check(vno_pom, fp->fp_realuid))
+		r = EACCES;
+	unlock_vnode(vno_pom);
+	unlock_vmnt(vm_pom);
+	put_vnode(vno_pom);
+  }
+
   if (r == OK) {
 	upgrade_vmnt_lock(oldvmp); /* Upgrade to exclusive access */
 	r = req_rename(old_dirp->v_fs_e, old_dirp->v_inode_nr, old_name,
 		       new_dirp->v_inode_nr, fullpath);
   }
 
+  if (r == OK)
+	excl_mark_as_moved(vp);
+  
   unlock_vnode(old_dirp);
   unlock_vmnt(oldvmp);
   if (new_dirp_l) unlock_vnode(new_dirp_l);
@@ -267,6 +305,9 @@ int do_rename(void)
 
   put_vnode(old_dirp);
   put_vnode(new_dirp);
+  unlock_vnode(vp);
+  put_vnode(vp);
+
 
   return(r);
 }
@@ -310,7 +351,9 @@ int do_truncate(void)
 	 * ensures that the file times are retained when the file size remains
 	 * the same, which is a POSIX requirement.
 	 */
-	if (S_ISREG(vp->v_mode) && vp->v_size == length)
+	if ((r = excl_perm_check(vp, fp->fp_realuid)) != EXCL_OK)
+		r = EACCES;
+	else if (S_ISREG(vp->v_mode) && vp->v_size == length)
 		r = OK;
 	else
 		r = truncate_vnode(vp, length);
@@ -344,7 +387,9 @@ int do_ftruncate(void)
 
   vp = rfilp->filp_vno;
 
-  if (!(rfilp->filp_mode & W_BIT))
+  if (excl_perm_check(vp, fp->fp_realuid) != EXCL_OK)		
+	r = EACCES;
+  else if (!(rfilp->filp_mode & W_BIT))
 	r = EBADF;
   else if (S_ISREG(vp->v_mode) && vp->v_size == length)
 	/* If the file size does not change, do not make the actual call. This
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/main.c fake_mount/usr/src/minix/servers/vfs/main.c
--- old_mount/usr/src/minix/servers/vfs/main.c	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/main.c	2023-06-18 15:27:30.933312797 +0200
@@ -26,6 +26,8 @@
 #include <minix/debug.h>
 #include <minix/vfsif.h>
 #include "file.h"
+#include "glo.h"
+#include "proto.h"
 #include "scratchpad.h"
 #include "vmnt.h"
 #include "vnode.h"
@@ -380,6 +382,7 @@ static int sef_cb_init_fresh(int UNUSED(
   init_select();		/* init select() structures */
   init_filps();			/* Init filp structures */
   mount_pfs();			/* mount Pipe File Server */
+  init_excl_locks();		/* init excl_locks structures */
 
   /* Mount initial ramdisk as file system root. */
   receive_from = MFS_PROC_NR;
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/Makefile fake_mount/usr/src/minix/servers/vfs/Makefile
--- old_mount/usr/src/minix/servers/vfs/Makefile	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/Makefile	2023-06-15 17:37:20.024768290 +0200
@@ -7,7 +7,8 @@ SRCS=	main.c open.c read.c write.c pipe.
 	filedes.c stadir.c protect.c time.c \
 	lock.c misc.c utility.c select.c table.c \
 	vnode.c vmnt.c request.c \
-	tll.c comm.c worker.c coredump.c
+	tll.c comm.c worker.c coredump.c \
+	exclusive.c
 
 .if ${MKCOVERAGE} != "no"
 SRCS+=  gcov.c
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/mount.c fake_mount/usr/src/minix/servers/vfs/mount.c
--- old_mount/usr/src/minix/servers/vfs/mount.c	2023-06-15 20:02:39.805608345 +0200
+++ fake_mount/usr/src/minix/servers/vfs/mount.c	2023-06-18 16:28:54.534952507 +0200
@@ -23,6 +23,7 @@
 #include <assert.h>
 #include "file.h"
 #include <minix/vfsif.h>
+#include "proto.h"
 #include "vnode.h"
 #include "vmnt.h"
 #include "path.h"
@@ -480,11 +481,14 @@ int unmount(
   /* See if the mounted device is busy.  Only 1 vnode using it should be
    * open -- the root vnode -- and that inode only 1 time. */
   locks = count = 0;
-  for (vp = &vnode[0]; vp < &vnode[NR_VNODES]; vp++)
+  for (vp = &vnode[0]; vp < &vnode[NR_VNODES]; vp++) {
 	  if (vp->v_ref_count > 0 && vp->v_dev == dev) {
 		count += vp->v_ref_count;
 		if (is_vnode_locked(vp)) locks++;
 	  }
+	  /* try droping excl_locks */
+	  excl_drop_lock(vp);
+  }
 
   if (count > 1 || locks > 1 || tll_haspendinglock(&vmp->m_lock)) {
 	unlock_vmnt(vmp);
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/open.c fake_mount/usr/src/minix/servers/vfs/open.c
--- old_mount/usr/src/minix/servers/vfs/open.c	2023-06-15 20:02:39.808941742 +0200
+++ fake_mount/usr/src/minix/servers/vfs/open.c	2023-06-18 22:12:49.631259689 +0200
@@ -18,6 +18,7 @@
 #include <minix/com.h>
 #include <minix/u64.h>
 #include "file.h"
+#include "proto.h"
 #include "scratchpad.h"
 #include "lock.h"
 #include <sys/dirent.h>
@@ -141,8 +142,12 @@ int common_open(char path[PATH_MAX], int
 
   /* Only do the normal open code if we didn't just create the file. */
   if (exist) {
+	/* check for excl_lock */
+	if (excl_perm_check(vp, fp->fp_realuid) != EXCL_OK)
+		r = EACCES;
 	/* Check protections. */
-	if ((r = forbidden(fp, vp, bits)) == OK) {
+	else if ((r = forbidden(fp, vp, bits)) == OK)
+	{
 		/* Opening reg. files, directories, and special files differ */
 		switch (vp->v_mode & S_IFMT) {
 		   case S_IFREG:
@@ -695,6 +700,9 @@ int fd_nr;
 
   FD_CLR(fd_nr, &rfp->fp_cloexec_set);
 
+  /* let excl locks know that we are closing smoe descriptor */
+  excl_closing_fd(fd_nr, fp->fp_pid, vp);
+
   /* Check to see if the file is locked.  If so, release all locks. */
   if (nr_locks > 0) {
 	lock_count = nr_locks;	/* save count of locks */
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/proto.h fake_mount/usr/src/minix/servers/vfs/proto.h
--- old_mount/usr/src/minix/servers/vfs/proto.h	2023-06-15 20:02:39.808941742 +0200
+++ fake_mount/usr/src/minix/servers/vfs/proto.h	2023-06-18 23:37:23.816278481 +0200
@@ -348,4 +348,15 @@ void worker_wait(void);
 struct worker_thread *worker_suspend(void);
 void worker_resume(struct worker_thread *org_self);
 void worker_set_proc(struct fproc *rfp);
+
+/* exclusive.c */
+int do_exclusive(void);
+int do_fexclusive(void);
+int excl_perm_check(struct vnode* vp, uid_t usr);
+void excl_drop_lock(struct vnode* vp);
+void excl_closing_fd(int closed_fd, pid_t caller_p, struct vnode* vp);
+void init_excl_locks(void);
+void excl_put_vnode_handler(struct vnode* vp);
+void excl_mark_as_moved(struct vnode* vp);
+
 #endif
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/read.c fake_mount/usr/src/minix/servers/vfs/read.c
--- old_mount/usr/src/minix/servers/vfs/read.c	2023-06-15 20:02:39.808941742 +0200
+++ fake_mount/usr/src/minix/servers/vfs/read.c	2023-06-18 15:37:43.408683157 +0200
@@ -20,6 +20,8 @@
 #include <fcntl.h>
 #include <unistd.h>
 #include "file.h"
+#include "glo.h"
+#include "proto.h"
 #include "scratchpad.h"
 #include "vnode.h"
 #include "vmnt.h"
@@ -225,6 +228,9 @@ int read_write(struct fproc *rfp, int rw
 	if(rw_flag == PEEKING) {
 		r = req_peek(vp->v_fs_e, vp->v_inode_nr, position, size);
 	} else {
+		if (excl_perm_check(vp, fp->fp_realuid) == EXCL_NOT_OK)
+			r = EACCES;
+		else {	
 		off_t new_pos;
 		r = req_readwrite(vp->v_fs_e, vp->v_inode_nr, position,
 			rw_flag, for_e, buf, size, &new_pos,
@@ -236,6 +242,7 @@ int read_write(struct fproc *rfp, int rw
 		}
         }
   }
+  }
 
   /* On write, update file size and access time. */
   if (rw_flag == WRITING) {
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/table.c fake_mount/usr/src/minix/servers/vfs/table.c
--- old_mount/usr/src/minix/servers/vfs/table.c	2023-06-15 20:02:39.812275138 +0200
+++ fake_mount/usr/src/minix/servers/vfs/table.c	2023-06-15 17:37:20.064769073 +0200
@@ -65,4 +65,6 @@ int (* const call_vec[NR_VFS_CALLS])(voi
 	CALL(VFS_COPYFD)	= do_copyfd,		/* copyfd(2) */
 	CALL(VFS_CHECKPERMS)	= do_checkperms,	/* checkperms(2) */
 	CALL(VFS_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(VFS_EXCLUSIVE)	= do_exclusive,		/* exclusive() */
+	CALL(VFS_FEXCLUSIVE)	= do_fexclusive,	/* fexclusive() */
 };
diff -rupNEZbB old_mount/usr/src/minix/servers/vfs/vnode.c fake_mount/usr/src/minix/servers/vfs/vnode.c
--- old_mount/usr/src/minix/servers/vfs/vnode.c	2023-06-15 20:02:39.812275138 +0200
+++ fake_mount/usr/src/minix/servers/vfs/vnode.c	2023-06-18 23:22:54.637840676 +0200
@@ -9,6 +9,7 @@
  */
 
 #include "fs.h"
+#include "proto.h"
 #include "vnode.h"
 #include "vmnt.h"
 #include "file.h"
@@ -293,6 +294,8 @@ void put_vnode(struct vnode *vp)
   vp->v_ref_count = 0;
   vp->v_mapfs_count = 0;
 
+  excl_put_vnode_handler(fp, vp);
+
   unlock_vnode(vp);
 }
 
